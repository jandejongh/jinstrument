/* 
 * Copyright 2010-2020 Jan de Jongh <jfcmdejongh@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.javajdj.jinstrument;

import java.io.IOException;
import java.util.List;

/** Extension of {@link Instrument} for (single-channel) frequency counters.
 *
 * @param <M> The type of modes (functions, measurement functions, etc.) on the instrument.
 * @param <T> The type of trigger modes.
 * 
 * @author Jan de Jongh {@literal <jfcmdejongh@gmail.com>}
 * 
 */
public interface FrequencyCounter<M, T>
extends Instrument
{

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // MODE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  List<M> getSupportedModes ();
  
  void setInstrumentMode (M instrumentMode)
    throws IOException, InterruptedException, UnsupportedOperationException;
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // FREQUENCY RANGE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  double getMinFrequency_Hz ();
  
  double getMaxFrequency_Hz ();
  
  double getFrequencyResolution_Hz ();
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // GATE TIME
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  boolean supportsGetGateTime ();
  
  boolean supportsSetGateTime ();
  
  double getMinGateTime_s ();
  
  double getMaxGateTime_s ();
  
  double getGateTimeResolution_s ();
  
  void setGateTime_s (double gateTime_s)
    throws IOException, InterruptedException, UnsupportedOperationException;
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // TRIGGERING
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  List<T> getSupportedTriggerModes ();
  
  double getMinTriggerLevel_V ();
  
  double getMaxTriggerLevel_V ();
  
  double getTriggerLevelResolution_V ();
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // END OF FILE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
}
