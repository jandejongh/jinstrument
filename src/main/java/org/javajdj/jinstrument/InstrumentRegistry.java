/* 
 * Copyright 2010-2019 Jan de Jongh <jfcmdejongh@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.javajdj.jinstrument;

import java.util.List;

/** Central registry of {@link Controller}, {@link Device}, and {@link Instrument} types and instantiations.
 *
 * @author Jan de Jongh {@literal <jfcmdejongh@gmail.com>}
 * 
 */
public interface InstrumentRegistry
{
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // REGISTRY LISTENERS
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  @FunctionalInterface
  interface Listener
  {
    
    void instrumentRegistryChanged (InstrumentRegistry instrumentRegistry);
    
    default void instrumentRegistrySetSelectedInstrumentView (
      final InstrumentRegistry instrumentRegistry,
      InstrumentView instrumentView) { }
    
  }
  
  void addRegistryListener (Listener l);
  
  void removeRegistryListener (Listener l);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // BUS TYPES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addBusType (BusType busType);
  
  void removeBusType (BusType busType);
  
  List<BusType> getBusTypes ();
  
  BusType getBusTypeByUrl (String busTypeUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // CONTROLLER TYPES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addControllerType (ControllerType controllerType);
    
  void removeControllerType (ControllerType controllerType);
  
  List<ControllerType> getControllerTypes ();
  
  ControllerType getControllerTypeByUrl (String controllerTypeUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // DEVICE TYPES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addDeviceType (DeviceType deviceType);
    
  void removeDeviceType (DeviceType deviceType);
  
  List<DeviceType> getDeviceTypes ();
  
  DeviceType getDeviceTypeByUrl (String deviceTypeUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // INSTRUMENT TYPES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addInstrumentType (InstrumentType instrumentType);
    
  void removeInstrumentType (InstrumentType instrumentType);
  
  List<InstrumentType> getInstrumentTypes ();
  
  InstrumentType getInstrumentTypeByUrl (String instrumentTypeUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // INSTRUMENT VIEW TYPES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addInstrumentViewType (InstrumentViewType instrumentViewType);
    
  void removeInstrumentViewType (InstrumentViewType instrumentViewType);
  
  List<InstrumentViewType> getInstrumentViewTypes ();
  
  InstrumentViewType getInstrumentViewTypeByUrl (String instrumentViewTypeUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // BUSES
  // 
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addBus (Bus bus);
  
  void removeBus (Bus bus);
  
  List<Bus> getBuses ();
  
  Bus getBusByUrl (String busUrl);
  
  Bus openBus (String busUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // CONTROLLERS
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addController (Controller controller);
  
  void removeController (Controller controller);
  
  List<Controller> getControllers ();
  
  Controller getControllerByUrl (String controllerUrl);
  
  Controller openController (String controllerUrl);
  
  Controller openController (ControllerType controllerType, String relativeControllerUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // DEVICES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addDevice (Device device);
  
  void removeDevice (Device device);
  
  List<Device> getDevices ();
  
  Device getDeviceByUrl (String deviceUrl);
  
  Device openDevice (String deviceUrl);
  
  Device openDevice (DeviceType deviceType, Bus bus, String busAddressUrl);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // INSTRUMENTS
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addInstrument (Instrument instrument);
  
  void removeInstrument (Instrument instrument);
  
  List<Instrument> getInstruments ();
  
  Instrument getInstrumentByUrl (String instrumentUrl);
  
  Instrument openInstrument (String instrumentUrl);
  
  Instrument openInstrument (InstrumentType instrumentType, Device device);
  
  InstrumentType getInstrumentType (Instrument instrument);
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // INSTRUMENT VIEWS
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  void addInstrumentView (InstrumentView instrumentView);
  
  void removeInstrumentView (InstrumentView instrumentView);
  
  List<InstrumentView> getInstrumentViews ();
  
  InstrumentView getInstrumentViewByUrl (String instrumentViewUrl);
  
  InstrumentView openInstrumentView (String instrumentViewUrl);
  
  InstrumentView openInstrumentView (InstrumentViewType instrumentViewType, Instrument instrument);
  
  void setSelectedInstrumentView (InstrumentView instrumentView);
    
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // END OF FILE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
}
