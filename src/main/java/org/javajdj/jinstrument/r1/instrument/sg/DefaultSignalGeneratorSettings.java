package org.javajdj.jinstrument.r1.instrument.sg;

import java.util.logging.Logger;

/**
 *
 */
public class DefaultSignalGeneratorSettings
  implements SignalGeneratorSettings
{

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // LOGGER
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  private static final Logger LOG = Logger.getLogger (DefaultSignalGeneratorSettings.class.getName ());

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // CONSTRUCTOR(S) / CLONING / FACTORIES
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  public DefaultSignalGeneratorSettings (final double centerFrequency_MHz, final double S_dBm, final boolean outputEnable)
  {
    this.centerFrequency_MHz = centerFrequency_MHz;
    this.S_dBm = S_dBm;
    this.outputEnable = outputEnable;
  }

  @Override
  public SignalGeneratorSettings clone () throws CloneNotSupportedException
  {
    return (SignalGeneratorSettings) super.clone ();
  }

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // CENTER FREQUENCY
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  private final double centerFrequency_MHz;
  
  @Override
  public final double getCenterFrequency_MHz ()
  {
    return this.centerFrequency_MHz;
  }
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // SIGNAL POWER
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  private final double S_dBm;
  
  @Override
  public final double getS_dBm ()
  {
    return this.S_dBm;
  }
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // OUTPUT ENABLE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  private final boolean outputEnable;
  
  @Override
  public final boolean getOutputEnable ()
  {
    return this.outputEnable;
  }
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // EQUALS / HASHCODE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  @Override
  public int hashCode ()
  {
    int hash = 7;
    hash = 89 * hash + (int) (Double.doubleToLongBits (this.centerFrequency_MHz) ^ (Double.doubleToLongBits (this.centerFrequency_MHz) >>> 32));
    hash = 89 * hash + (int) (Double.doubleToLongBits (this.S_dBm) ^ (Double.doubleToLongBits (this.S_dBm) >>> 32));
    hash = 89 * hash + (this.outputEnable ? 1 : 0);
    return hash;
  }

  @Override
  public boolean equals (Object obj)
  {
    if (this == obj)
    {
      return true;
    }
    if (obj == null)
    {
      return false;
    }
    if (getClass () != obj.getClass ())
    {
      return false;
    }
    final DefaultSignalGeneratorSettings other = (DefaultSignalGeneratorSettings) obj;
    if (Double.doubleToLongBits (this.centerFrequency_MHz) != Double.doubleToLongBits (other.centerFrequency_MHz))
    {
      return false;
    }
    if (Double.doubleToLongBits (this.S_dBm) != Double.doubleToLongBits (other.S_dBm))
    {
      return false;
    }
    if (this.outputEnable != other.outputEnable)
    {
      return false;
    }
    return true;
  }
  
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //
  // END OF FILE
  //
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
